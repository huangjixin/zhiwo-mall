package com.fulan.api.security.service;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.cloud.netflix.feign.FeignClient;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestParam;import com.fulan.api.security.domain.Account;import com.fulan.api.security.domain.AccountManageVo;import com.fulan.api.security.domain.AccountRole;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.domain.Role;import com.fulan.api.security.vo.AccountAgentVo;import com.fulan.api.security.vo.AccountFuzzyQueryVO;import com.fulan.api.security.vo.AccountOffVo;import com.fulan.application.util.domain.Response;import com.fulan.application.util.page.PageInfo;@FeignClient(name = "security")public interface AccountService {	/**	 * 根据用户名和公司id查找账号	 * @param name	 * @param companyId	 * @return	 */	@PostMapping(value = "/account/findByNameAndCompanyId")	//@GetMapping("/accountService/findByNameAndCompanyId")	Account findByNameAndCompanyId(@RequestParam("name") String name,@RequestParam("companyId") Long companyId);	/**	 * 根据名称模糊查找账户id和账户name	 * @param name	 * @return	 */	@PostMapping(value = "/account/findFuzzyByName")	Response<AccountFuzzyQueryVO> findFuzzyByName(@RequestParam("name") String name);	/**	 * 新增账号接口	 * @param account	 * @return	 */	@PostMapping("/account/add")	Response<String> save(Account account);		/**	 * 新增账号接口(招募入口)	 * @param account	 * @return	 */	@PostMapping("/account/addAccountForEr")	Response<Account> addAccountForEr(Account account);	/**	 * 根据用户名和公司id更新密码	 * @param name	 * @param companyId	 * @return	 */	@PostMapping("/account/updatePassword")	int updatePasswordById(@RequestParam(name="password") String password,@RequestParam(name="id") Long id);	/**	 * 删除账号	 * @param account	 * @return	 */	@PostMapping("/account/delete")	int deleteById(Long id);	/**	 * 修改账号相关信息	 * @param account	 * @return	 */	@PostMapping("/account/update")	int update(Account account);		/**	 * 根据id查找	 * @param id	 * @return	 */	@PostMapping("/account/findById")	Response<Account> findById(@RequestParam(name="id") Long id);		/**	 * 根据条件查找	 * @param account	 * @return	 */	@PostMapping("/account/list")	List<Account> list(Account account);		/**	 * 增加角色	 * @param accountId	 * @param roleId	 * @return	 */	@PostMapping("/account/addRole")	Response<String> addRole(@RequestParam(name="accountId") Long accountId, @RequestParam(name="roleId") Long roleId);		/**	 * 删除角色	 * @param request	 * @param accountId	 * @param roleId	 * @return	 */	@PostMapping("/account/deleteRole")	Response<String> deleteRole(HttpServletRequest request, @RequestParam(name="accountId") Long accountId,@RequestParam(name="roleId") Long roleId);		/**	 * 查询角色	 * @param request	 * @param accountId	 * @return	 */	@PostMapping("/account/findRoles")	Response<List<Role>> findRoles(HttpServletRequest request, @RequestParam(name="accountId") Long accountId);		/**	 * 根据条件分页查询	 * @param pageNo	 * @param pageSize	 * @param account	 * @return	 */	@PostMapping("/accountService/listByPage")	PageInfo<Account> listByPage(			@RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,			@RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,		    @RequestParam(name="account") Account account);						@PostMapping("/manageAccount/insertAccountRole")	//Response<String> insertAccountRole(@RequestBody AccountRole accountRole);	Response<String> insertAccountRole(@RequestParam("accountId") Long accountId, @RequestParam("roleIds") Long[] roleIds);		/**	 * 新增用户接口	 * @param account	 * @return	 */	@PostMapping("/manageAccount/insert")    Response<String> insert(@RequestBody Account account);        /**	 * 删除用户	 * @param id	 * @return	 */	@GetMapping("/manageAccount/deleteAccount")	Response<String> deleteAccount(@RequestParam("id") Long id);    /**	 * 批量删除用户	 * @param account	 * @return	 */    /*@PostMapping("/manageAccount/batch/delete")    Response<String> deleteBacth(Long[] id);*/        /**	 * 修改用户相关信息	 * @param account	 * @return	 */	@PostMapping(value = "/manageAccount/updateAccount")	Response<String> updateAccount(@RequestBody Account account);        /**	 * 修改用户密码	 * @param id	 * @param password	 * @return	 */	@PostMapping(value = "/manageAccount/updatePassword")	Response<String> updatePassword(@RequestParam("id") Long id,@RequestParam("password") String password);		/**	 * 重置用户密码（密码重置为admin123）	 * @param id	 * @param password	 * @return	 */	@PostMapping(value = "/manageAccount/resetPassword")	Response<String> resetPassword(@RequestParam("id") Long id);    /**	 * 根据id查找	 * @param id	 * @return	 */	@PostMapping(value = "/manageAccount/find")    Account findByIdForManage(@RequestParam("id") Long id);		/**	 * 根据多个id查找	 * @param id	 * @return	 */	@PostMapping(value = "/manageAccount/findByAccountId")	List<Account> findByAccountId(@RequestParam("accountId") List<Long> accountId);    	/**	 * 根据条件分页查询	 * @param pageNo	 * @param pageSize	 * @param account	 * @return	 */	@PostMapping("/manageAccount/listByPage")	PageInfo<Account> listByPage(@RequestParam(name = "id", defaultValue = "0")Long id,			@RequestParam(name = "locked", defaultValue = "0")boolean locked,			@RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,			@RequestParam(name = "pageSize", defaultValue = "10") Integer pageSize,			@RequestParam(name = "pageSortFiled", defaultValue = "id") String pageSortFiled,	        @RequestParam(name = "pageSortType", defaultValue = "asc") String pageSortType,	        @RequestParam(name = "type", defaultValue = "1") String type);	@GetMapping(value = "/manageAccount/selectRoles")	List<Long> selectRoles(@RequestParam("accountId") Long accountId);		@GetMapping(value = "/manageAccount/selectResources")	List<Resource> selectResource(@RequestParam("roleId") Long roleId);		@GetMapping(value="/manageAccount/findByAccountId")	List<AccountRole> findByAccountId(@RequestParam("accountId") Long accountId);		@GetMapping(value="/manageAccount/findByRoleId")	List<Account> findByRoleId(@RequestParam("roleId") Long roleId);			@GetMapping(value="/manageAccount/findByOtherRoleId")	List<Account> findByOtherRoleId(			@RequestParam(name="roleId" ,required = false)String roleId,			@RequestParam(name="accountName",required = false) String accountName,			@RequestParam(name="mobile",required = false) String mobile			);			@PostMapping(value="/manageAccount/findByRoleType")	Response<List<Account>> findByRoleType(			@RequestParam("type") String type,			@RequestParam("PID")Long PID,			@RequestParam(value="name",required=false) String name);		@GetMapping(value="/manageAccount/findByAccountIdandTime")	String findByAccountIdandTime(@RequestParam("accountId") Long accountId,@RequestParam("searchMonth") Long searchMonth);		@PostMapping(value="/manageAccount/findByRoleIdAndName")	List<Account> findByRoleIdAndName(@RequestParam("roleId") Long roleId,@RequestParam(value="name",required=false) String name);			@GetMapping(value="/manageAccount/selectYeaytargetbyaccountId")	String selectYeaytargetbyaccountId(@RequestParam("accountId") Long accountId);		@GetMapping(value="/manageAccount/selectaccountIdsbycompanyId")	List<Long> selectaccountIdsbycompanyId(@RequestParam("companyId") String companyId);			@GetMapping(value="/manageAccount/selectteamMouthtargetbyaccountIds")	String selectteamMouthtargetbyaccountIds(@RequestParam("accountIds") List<Long> accountIds,@RequestParam("searchMonth") Long searchMonth);			@GetMapping(value="/manageAccount/selectteamYeaycountbyaccountIds")	String selectteamYeaycountbyaccountIds(@RequestParam("accountIds") List<Long> accountIds);		@PostMapping("/manageAccount/findByName")	Account findByName(@RequestParam("accountName") String accountName);	
	/**	 * 获取用户	 * @param account	 * @return	 */	@PostMapping("/account/findByMap")    List<Account> findByMap(@RequestBody(required=true) Map searchMap);	
	@GetMapping("/manageAccount/selectByAll")	List<Account> selectByAll(@RequestParam(name="accountName",required = false)String accountName,			                  @RequestParam(name="mobile",required = false) String mobile);		@GetMapping("/manageAccount/selectByCompanyId")	List<Account> selectByCompanyId(@RequestParam(name="companyId",required = false)String companyId);		@GetMapping("/manageAccount/selectByNameOff")	PageInfo<AccountOffVo> selectByNameOff(			@RequestParam(name="idList",required=false) List<Long> idList,			@RequestParam(name="name",required=false)String name,			@RequestParam(value="pageNo",defaultValue="1") int pageNo,	        @RequestParam(value="pageSize",defaultValue="10") int pageSize);			@GetMapping("/manageAccount/listByPages")	PageInfo<AccountManageVo> listByPages(			@RequestParam(name="accountName" ,required = false)String accountName,			@RequestParam(name="telephone",required = false) String telephone,			@RequestParam(name = "pageNo", defaultValue = "1") int pageNo,            @RequestParam(name = "pageSize", defaultValue = "10") int pageSize	        );
//	@PostMapping("/account/checkLogin")//	String checkLogin (@RequestParam("uName") String uName,@RequestParam("pCode") String pCode);		/**	 * 查询不在用户组中的用户列表(已关联用户组的用户不能在关联用户组,供用户组选择用户使用)	 * @param accountName	 * @param telephone	 * @param pageNo	 * @param pageSize	 * @return	 */    @GetMapping("/manageAccount/listByPagesNotInUserGroup")    PageInfo<AccountManageVo> listByPagesNotInUserGroup(            @RequestParam(name="accountName" ,required = false)String accountName,            @RequestParam(name="telephone",required = false) String telephone,            @RequestParam(name = "pageNo", defaultValue = "1") int pageNo,            @RequestParam(name = "pageSize", defaultValue = "10") int pageSize            );        /**	 * 查询全部账号职级集合	 * 	 * @return	 */    @GetMapping("/account/selectAllAccountAgent")    List<AccountAgentVo> selectAllAccountAgent();}