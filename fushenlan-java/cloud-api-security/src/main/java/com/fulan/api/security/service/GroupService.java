package com.fulan.api.security.service;import java.util.List;import org.springframework.cloud.netflix.feign.FeignClient;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestParam;import com.fulan.api.security.domain.UserGroup;import com.fulan.api.security.domain.UserGroupVo;import com.fulan.api.security.vo.AccountGroupVo;import com.fulan.application.util.page.PageInfo;@FeignClient(name = "security")public interface GroupService {    	/**	 * 分页查询	 * @param group	 * @param pageNo	 * @param pageSize	 * @param pageSortFiled	 * @param pageSortType	 * @return	 */	@GetMapping(value = "/manage/group/listByParam")	PageInfo<UserGroup> listGroup(@RequestBody UserGroup group, 	        @RequestParam(value="pageNo", required=false) int pageNo,            @RequestParam(value="pageSize", required=false) int pageSize,             @RequestParam(value="pageSortFiled", required=false, defaultValue = "id") String pageSortFiled,            @RequestParam(value="pageSortType", required=false, defaultValue = "DESC") String pageSortType);		/**	 *保存修改	 * @param group	 * @param tagStr 标签字符串	 * @param userStr 用户字符串	 * @return	 */	@PostMapping(value = "/manage/group/saveGroup")	int saveGroup(@RequestBody UserGroup group, 	        @RequestParam(value="tagStr",required=false)String tagStr, 	        @RequestParam(value="userStr",required=false) String userStr,	        @RequestParam(value="newTag", required=false) String newTag); 			/**	 * 删除	 * @param groupIds	 * @return	 */	@PostMapping(value = "/manage/group/deleteGroup")	String deleteGroups (@RequestParam(value="groupIds",required=false) String groupIds);		/*	 * 获取改组下用户	 */	@GetMapping(value = "/manage/group/countUserNum")	int countUserNum(@RequestParam("groupId") Long groupId);		/**	 * 根据Id查询	 * @param id	 * @return	 */	@GetMapping(value = "/manage/group/selectById")    UserGroup selectById(@RequestParam(value="id",required=false) Long id);		@GetMapping(value = "/manage/group/selectAccountGroupByGroupId")    List<AccountGroupVo> selectAccountGroupByGroupId(@RequestParam(value="groupId",required=false) Long groupId);		@GetMapping(value = "/manage/group/selectByAccountId")	UserGroup selectByAccountId(@RequestParam(value="accountId",required=false) Long accountId);		/**	 * 查询所有用户组	 * @return	 */	@GetMapping(value = "/manage/group/listAllGroups")    List<UserGroup> listAllGroups();	}