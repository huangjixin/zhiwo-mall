package com.fulan.application.service;import java.util.List;import org.apache.ibatis.annotations.Param;import com.baomidou.mybatisplus.plugins.Page;import com.fulan.api.security.domain.Account;import com.fulan.api.security.domain.AccountManageVo;import com.fulan.api.security.domain.Role;import com.fulan.api.security.vo.AccountAgentVo;import com.fulan.api.security.vo.AccountFuzzyQueryVO;import com.fulan.api.security.vo.AccountOffVo;import com.fulan.api.security.vo.AccountVO;import com.fulan.application.util.domain.Response;import com.fulan.application.util.page.PageInfo;public interface AccountService {	/**	 * 根据用户名和公司id查找账号	 *	 * @param name	 * @param companyId	 * @return	 */	Account findByNameAndCompanyId(String name, String companyId);	/**	 * 根据用户名查找账号	 *	 * @param name	 * @return	 */	Account findByName(String name);	/**	 * 根据账户名称模糊查找账户id和账户name	 * @param name	 * @return	 */	Response<List<AccountFuzzyQueryVO>> findFuzzyByName(String name);	/**	 * 新增账号接口	 *	 * @param account	 * @return	 */	Response<String> save(Account account);		/**	 * 新增账号接口(招募入口使用)	 *	 * @param account	 * @return	 */	Response<Account> saveAccountForEr(Account account);	/**	 * 新增账号接口	 *	 * @param account	 * @return	 */	Response<String> insertAccount(Account account);	/**	 * 根据用户名和公司id更新密码	 *	 * @param name	 * @param companyId	 * @return	 */	void updatePasswordById(String password, Long id);	/**	 * 删除账号	 *	 * @param account	 * @return	 */	void deleteById(Long id);	/**	 * 修改账号相关信息	 *	 * @param account	 * @return	 */	Response<String> update(Account account);	/**	 * 修改账号相关信息（大后台）	 *	 * @param account	 * @return	 */	Response<String> updateAccount(Account account);	/**	 * 删除账号（大后台）	 *	 * @param account	 * @return	 */	void deleteAccountById(Long id);	/**	 * 根据id查找	 *	 * @param id	 * @return	 */	Account findById(Long id);	/**	 * 根据条件查找	 *	 * @param account	 * @return	 */	Page<Account> list(Account account, Page<Account> page);	 /**     * 分页，条件查询     *     * @param id     * @param pageNo     * @param pageSize     * @param pageSortFiled     * @param pageSortType     * @param type 用来区分是谁调用接口     * @return     */    Page<Account> listByPage(Long id, boolean locked,int pageNo, int pageSize, String pageSortFiled, String pageSortType,String type);	/**	 * 账号增加角色	 *	 * @param accountId	 * @param roleId	 * @return	 */	Response<String> addRole(Long accountId, Long roleId);	/**	 * 账号删除角色	 *	 * @param accountId	 * @param roleId	 * @return	 */	void deleteRole(Long accountId, Long roleId);	/**	 * 查找账户角色列表	 *	 * @param accountId	 * @return	 */	List<Role> findRoles(Long accountId);	List<Long> selectRoles(Long accountId);	Long saveAccount(Account account);	Account selectByAccount(AccountVO accountVO);		/**	 * 根据角色id查询账户id	 * @param accountId	 * @return	 */	List<Account> findByRoleId(Long roleId);			List<Account> findByOtherRoleId(String roleId ,String accountName,String mobile);		/**	 * 根据角色id查询账户id	 * @param accountId	 * @param name	 * @return	 */	List<Account> findByRoleIdAndName(Long roleId,String name);		List<Account> findByAccountId(@Param("accountId")List<Long> accountId);		String selectentryNumbyparams(Long accountId, Long searchMonth);			String selectYeaytargetbyaccountId(Long accountId);		    List<Long> selectaccountIdsbycompanyId(String companyId);        String selectteamyeartargetbyaccountIds(List<String> accountIds);		    String selectteamMouthtargetbyaccountIds(List<String> accountIds, Long searchMonth);        List<Account> selectByAll(String accountName,String mobile);        List<Account> selectByCompanyId(String companyId);        PageInfo<AccountOffVo> selectByNameOff(Page<AccountOffVo> page,List<Long> idList,String name,int pageNo,int pageSize);    //    String checkLogin(String uName , String pCode,HttpServletRequest request);    	      PageInfo<AccountManageVo> listByPages(Page<AccountManageVo> page ,String accountName,String telephone,int pageNo, int pageSize);	    Response<List<Account>> findByRoleType(String type,Long PID,String name);    PageInfo<AccountManageVo> listByPagesNotInUserGroup(            Page<AccountManageVo> page, String accountName, String telephone,            int pageNo, int pageSize);        //由于密码是加密的，所以此方法仅用于用于内部修改更新密码使用，不对外使用    Response<String> updateByAccountName(Account account);        List<AccountAgentVo> selectAllAccountAgent();}