package com.fulan.application.controller;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import com.fulan.api.security.vo.AccountVO;import com.fulan.application.login.service.HandlerLoginService;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.fulan.api.security.domain.Account;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.domain.Role;import com.fulan.application.service.AccountService;import com.fulan.application.service.ResourceService;import com.fulan.application.service.RoleService;import com.fulan.application.token.TokenHelper;import com.fulan.application.util.constant.GlobalConstant;import com.fulan.application.util.domain.Response;import com.fulan.core.monitoring.log.annotation.NoLog;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;@NoLog@Api(tags = "AuthApi", description = "认证授权接口")@RestControllerpublic class LoginController {	@Autowired	AccountService accountService;	@Autowired    HandlerLoginService handlerLoginService;	@Autowired	RoleService roleService;	@Autowired	ResourceService resourceService;	private static final Logger logger = LoggerFactory.getLogger(LoginController.class);	@ApiOperation(value = "用户登录", notes = "用户登录", response = Response.class)	@RequestMapping(value = "/login", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> login(@RequestBody AccountVO accountVO) {		try {			if (accountVO == null || StringUtils.isEmpty(accountVO.getAccountName()) || StringUtils.isEmpty(accountVO.getPassword()))				return new Response<>(Response.ERROR, "用户名或密码为空");            return handlerLoginService.login(accountVO);		} catch (Exception e) {			logger.error("", e);			return new Response<>(Response.ERROR, e.getMessage());		}	}	@ApiOperation(value = "账号按钮授权", notes = "账号按钮授权", response = Response.class)	@RequestMapping(value = "/authButton", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<List<Resource>> authButton(HttpServletRequest request, @RequestParam(required=true) Long accountId) {		try {			Response<List<Resource>> resp = new Response<List<Resource>>(Response.SUCCESS, "按钮授权成功");					resp.setData(this.auth(accountId,"00"));			return resp;		} catch (Exception e) {			logger.error("按钮授权失败",e);			return new Response<List<Resource>>(Response.ERROR, e.getMessage());		}	}		@ApiOperation(value = "菜单按钮授权", notes = "菜单按钮授权", response = Response.class)	@RequestMapping(value = "/authMenu", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<List<Resource>> authMenu(HttpServletRequest request, @RequestParam(required=true) Long accountId) {		try {			Response<List<Resource>> resp = new Response<List<Resource>>(Response.SUCCESS, "菜单授权成功");					resp.setData(this.auth(accountId,"01"));			return resp;		} catch (Exception e) {			logger.error("按钮授权失败",e);			return new Response<List<Resource>>(Response.ERROR, e.getMessage());		}	}		private List<Resource> auth(Long accountId,String resourceType){		// 1.根据账户id查找角色		List<Role> roles=accountService.findRoles(accountId);		//2.根据角色查找资源		List<Resource> resources=new ArrayList<>();		for(Role role:roles){			resources.addAll(roleService.findResources(role.getId(),resourceType));		}		return resources;	}}