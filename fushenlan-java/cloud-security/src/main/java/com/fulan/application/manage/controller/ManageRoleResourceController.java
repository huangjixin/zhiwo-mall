package com.fulan.application.manage.controller;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.baomidou.mybatisplus.plugins.Page;import com.fulan.api.security.domain.RoleResource;import com.fulan.application.service.RoleResourceService;import com.fulan.application.util.domain.Response;import com.fulan.core.monitoring.log.annotation.NoLog;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;@NoLog@RestController@RequestMapping(value = "/manage/roleResourceService")public class ManageRoleResourceController {	@Autowired	RoleResourceService roleResourceService;	private static final Logger logger = LoggerFactory.getLogger(ManageRoleResourceController.class);	@RequestMapping(value = "/add", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addRole(HttpServletRequest request, @RequestBody RoleResource roleResource) {				try {			return roleResourceService.save(roleResource);		}		catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除角色资源失败");		}	}		@RequestMapping(value = "/addBatch", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addRoleBatch(HttpServletRequest request, @RequestParam("roleId")String roleId,@RequestParam("resourceIds")String resourceIds) {				try {			return roleResourceService.saveRoleBatch(roleId, resourceIds);		}		catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除角色资源失败");		}			}	@RequestMapping(value = "/deleteBatch", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> deleteBatch(HttpServletRequest request, @RequestParam(required=true) String ids) {		try {			return roleResourceService.deleteBatch(ids);		}		catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除角色资源失败");		}	}		@RequestMapping(value = "/delete", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> delRoleResource(HttpServletRequest request, @RequestParam(required=true) Long id) {		roleResourceService.deleteById(id);		return new Response<String>(Response.SUCCESS, "删除角色资源成功");	}		@RequestMapping(value = "/listByPage", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Page<RoleResource> listByPage(HttpServletRequest request,@RequestBody RoleResource roleResource,			@RequestParam(required=true) Integer pageNo,@RequestParam(required=true) Integer pageSize){		return roleResourceService.listByPage(pageNo, pageSize, roleResource);	}		@RequestMapping(value="/seleByRoleId",method=RequestMethod.POST)	public Response<List<RoleResource>> seleByRoleId(@RequestBody RoleResource roleResource,		@RequestParam(name = "pageSortFiled") String pageSortFiled,        @RequestParam(name = "pageSortType") String pageSortType){		try{		Response<List<RoleResource>> response = new Response<List<RoleResource>>();		response.setData(roleResourceService.seleByRoleId(roleResource, pageSortFiled, pageSortType));		return response;		}catch(Exception e){			logger.error(e.getMessage());			return new Response<List<RoleResource>>(Response.ERROR,"查询资源失败");		}	}		@RequestMapping(value="/findByRoleId",method=RequestMethod.POST)	public Response<List<RoleResource>> findByRoleId(@RequestParam("roleId") Long roleId){		try{			List<RoleResource> list = roleResourceService.findByRoleId(roleId);			Response<List<RoleResource>> response = new Response<List<RoleResource>>();			if(list.size()>0){				response.setCode(Response.SUCCESS);				response.setMsg("查询成功");				response.setData(list);				return response;			}else{				response.setCode(Response.ERROR);				response.setMsg("查询失败");				return response;			}		}catch(Exception e){			logger.error(e.getMessage());			return new Response<List<RoleResource>>(Response.ERROR,"查询资源失败");		}	}}