package com.fulan.application.login.service.impl;import java.io.InputStream;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;import com.fulan.api.agent.vo.*;import com.fulan.application.util.date.DateUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.alibaba.fastjson.JSONObject;import com.fulan.api.agent.service.AgentService;import com.fulan.api.agent.service.MemberService;import com.fulan.api.security.domain.Account;import com.fulan.api.security.vo.AccountVO;import com.fulan.application.login.service.LoginService;import com.fulan.application.redis.RedisUtil;import com.fulan.application.token.TokenHelper;import com.fulan.application.util.constant.GlobalConstant;import com.fulan.application.util.domain.Response;import com.fulan.application.util.util.JsonUtils;import com.fulan.core.monitoring.cat.constant.Constant;/** * @Description: 登录DMS系统业务处理逻辑 * @author: guiyang * @date: 2018/1/25 14:22 */@Service("DMS_SYSTEM")@Transactionalpublic class DmsLoginServiceImpl implements LoginService{	private Logger logger = LoggerFactory.getLogger(HandlerLoginServiceImpl.class);	@Autowired    TokenHelper tokenHelper;	@Autowired	private AgentService agentService;	@Autowired	private MemberService memberService;	@Autowired	RedisUtil redisUtil;	 	@Value("${dms.userid}")	private  String dmsuserid;	 	 @Value("${dms.token}")	 private  String dmstoken;	 	 @Value("${dms.logintype}")	 private  String dmslogintype;	 	 @Value("${dms.getagenttoken}")	 private  String dmsgetagenttoken;		 @Value("${dms.sit.userid}")	 private  String situserid;			@SuppressWarnings("unused")	@Override	public Response<String> login(AccountVO accountVO1) {				boolean flag ;		try {						ValidateUserReq req = new  ValidateUserReq();			req.setUserName(accountVO1.getAccountName());			req.setPassword(accountVO1.getPassword());						flag = memberService.validateUser(dmsuserid, dmslogintype, dmstoken, req).getData();		}catch (Exception e){			logger.error("{-----远程服务器异常-----}");			e.printStackTrace();			return new Response<>(Response.ERROR, "远程服务器异常");		}		Response<ResultModel> resultModel = null;		if(flag==true){//调用dms接口登录成功			//获取DMS远程登录实例,并获取数据			Req agentInfoVo1 = new Req();			agentInfoVo1.setAgentId(accountVO1.getAccountName());			resultModel = agentService.getAgentFromDms(situserid,dmsgetagenttoken,agentInfoVo1);		}else{//调用dms接口登录失败			return new Response<>(Response.ERROR, "dms登录失败!");		}				Account accountVO  = new Account();				accountVO.setId(Long.valueOf(resultModel.getData().getAgent().getAgentId()));//设置代理人ID		accountVO.setAccountName(resultModel.getData().getAgent().getAgentName());//代理人名字		accountVO.setSystemType("DMS");//代理人所属系统		accountVO.setAccountType("3");//1后台管理2新人3代理人4内勤		accountVO.setCompanyId(resultModel.getData().getBranchs().get(3).getBranchCode());//分公司ID		accountVO.setOrgId(resultModel.getData().getBranchs().get(0).getBranchCode());//对应营销处ID		accountVO.setPostType(resultModel.getData().getAgent().getDesignationCd());//职级		accountVO.setTeamSize(0l);//团队规模		accountVO.setCompanyName(resultModel.getData().getBranchs().get(3).getBranchName());//分公司名字		accountVO.setOrgName(resultModel.getData().getBranchs().get(0).getBranchName());//对应营销处name		accountVO.setGeneralCompanyId(resultModel.getData().getBranchs().get(4).getBranchCode());//总分公司ID		accountVO.setGeneralCompanyName(resultModel.getData().getBranchs().get(4).getBranchName());//总分公司名字		if(resultModel.getData().getAgentReport() == null){			accountVO.setBelongSuperior(Long.valueOf(10000678));//直属主管			accountVO.setBelongDirector(Long.valueOf(10000678));//直属总监		}else{						//Supervisor - 直属主管  Leader - 直辖主管	Director - 直辖总监 1 - 直属主管 2 - 直辖主管3 - 直辖总监			boolean Superiorflag= false;			boolean Directorflag= false;						for(int i =0; i< resultModel.getData().getAgentReport().size(); i++){				if(resultModel.getData().getAgentReport().get(i).getLeaderTier().equals("2")){					accountVO.setBelongSuperior(Long.valueOf(resultModel.getData().getAgentReport().get(i).getLeaderId()) );//直属主管					Superiorflag=true;				}else if(resultModel.getData().getAgentReport().get(i).getLeaderTier().equals("3")){					accountVO.setBelongDirector(Long.valueOf(resultModel.getData().getAgentReport().get(i).getLeaderId()) );//直属总监						Directorflag=true;				}			}			if(Superiorflag == false){				accountVO.setBelongSuperior(Long.valueOf(10000678));//直属主管			}			if(Directorflag == false){				accountVO.setBelongDirector(Long.valueOf(10000678));//直属总监			}								}		accountVO.setSuperior(Long.valueOf(resultModel.getData().getAgent().getSupervisorID()));//上级		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		Date createDate = null;		try {//			createDate = DateUtil.parse(resultModel.getData().getAgent().getJoiningDt());			createDate = sdf.parse(resultModel.getData().getAgent().getJoiningDt());		} catch (ParseException e) {			e.printStackTrace();		}		accountVO.setCreateTime(createDate);		redisUtil.set(Constant.LOGIN_ACCOUNT+accountVO.getId(), accountVO);		Map<String, Object> info = new HashMap<>();				info.put(GlobalConstant.TENANT_ID, accountVO.getCompanyId());        info.put(GlobalConstant.USER_ID, accountVO.getId());        info.put(GlobalConstant.USER_ACCOUNT, accountVO.getAccountName());        String outtoken = tokenHelper.createToken("account", info);                info.clear();		 info.put("account", accountVO);         info.put("token",outtoken);		if(resultModel.getData().getMemberList()!=null&&resultModel.getData().getMemberList().size()>0){			info.put("memberList",resultModel.getData().getMemberList());		}else{			/*List<AgentMember> memberList = new ArrayList<AgentMember>();			AgentMember member = new AgentMember();			member.setAgentCode((long) 1001);			member.setAgentName("first");			member.setRanking(1);			member.setFyc(20000);			member.setFyp(20000);			member.setMcase(20);			memberList.add(member);			member.setAgentCode((long) 1002);			member.setAgentName("second");			member.setRanking(2);			member.setFyc(19000);			member.setFyp(19000);			member.setMcase(19);			memberList.add(member);			member.setAgentCode((long) 1003);			member.setAgentName("third");			member.setRanking(3);			member.setFyc(18000);			member.setFyp(18000);			member.setMcase(18);			memberList.add(member);*/			String readJson = readJson("member.json");			info.put("memberList",readJson);		}		if(resultModel.getData().getHonorList()!=null&&resultModel.getData().getHonorList().size()>0){			info.put("honorList",resultModel.getData().getHonorList());		}else{			/*List<Honor> honorList = new ArrayList<Honor>();			Honor honor = new Honor();			honor.setOriginal("http://me.jpg");			honor.setCertificateName("高级执业证书");			honor.setCertificateNo("432503************6212");			honor.setGrantDate("2013-12-23");			honorList.add(honor);			honor.setOriginal("http://me.jpg");			honor.setCertificateName("top sale");			honor.setCertificateNo("432503************6213");			honor.setGrantDate("2013-12-23");			honorList.add(honor);*/			String readJson = readJson("honorList.json");			info.put("honorList",readJson);		}                Response<String> resp = new Response<String>(Response.SUCCESS, "dms用户校验成功");         resp.setData(JsonUtils.objectToJson(info));         		return resp;			}		 String readJson(String fileName) {			try {				InputStream stream = getClass().getClassLoader().getResourceAsStream("jsonpage/"+fileName);				byte []bts=new byte[1024*24];				stream.read(bts);				return new String(bts,"UTF-8");			} catch (Exception e) {				JSONObject jsonObject=new JSONObject();				jsonObject.put("code",0);				jsonObject.put("data","{}");				jsonObject.put("erro",e.getMessage());				e.printStackTrace();				return jsonObject.toJSONString();			}		} 							}