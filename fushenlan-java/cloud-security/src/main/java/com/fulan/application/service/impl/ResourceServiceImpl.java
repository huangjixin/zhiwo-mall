package com.fulan.application.service.impl;import java.util.ArrayList;import java.util.Collection;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.bind.annotation.RequestParam;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.vo.ResourceListVO;import com.fulan.application.mapper.AccountRoleMapper;import com.fulan.application.mapper.ResourceMapper;import com.fulan.application.orm.id.IdGenerator;import com.fulan.application.service.ResourceService;import com.fulan.application.util.domain.Response;@Servicepublic class ResourceServiceImpl extends ServiceImpl<ResourceMapper, Resource> implements ResourceService{	@Autowired	ResourceMapper resourceMapper;		@Autowired	AccountRoleMapper accountRoleMapper;		@Autowired    private IdGenerator idGenerator;		@Override	public Resource findById(Long id) {		return resourceMapper.selectById(id);	}	@Override	public Response<String> update(Resource resource) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加资源成功");		//查看角色名称是否重复		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("resource_name", resource.getResourceName());		List<Resource> resources=this.selectByMap(columnMap);		if(CollectionUtils.isNotEmpty(resources)){			resp.setCode(Response.ERROR);			resp.setMsg("资源名称已存在");			return resp;		}		resourceMapper.updateById(resource);		return resp;	}	@Override	public int deleteById(Long id) {		return resourceMapper.deleteById(id);	}	@Override	public Response<String> save(Resource resource) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加资源成功");		//查看角色名称是否重复		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("resource_name", resource.getResourceName());		List<Resource> resources=this.selectByMap(columnMap);		if(CollectionUtils.isNotEmpty(resources)){			resp.setCode(Response.ERROR);			resp.setMsg("资源名称已存在");			return resp;		}		resource.setId(idGenerator.generate());		resourceMapper.insert(resource);		return resp;	}	@Override	public Page<Resource> list(Resource resource,Page page) {		EntityWrapper<Resource> wrapper=new EntityWrapper<>(resource);		return this.selectPage(page, wrapper);	}	@Override	public List<Resource> list() {		Resource resource = new Resource();		EntityWrapper<Resource> wrapper=new EntityWrapper<>(resource);		return this.selectList(wrapper);	}	@Override	public List<Resource> listByparentId(Resource resource) {		// TODO Auto-generated method stub		EntityWrapper<Resource> wrapper=new EntityWrapper<>(resource);		return this.selectList(wrapper);	}	@Override	public Response<String> deleByParentId(Long parentId) {		 int count = resourceMapper.deleByParentId(parentId);		 if(count>0){			return new Response<>(Response.SUCCESS,"删除成功");		 }		 return new Response<>(Response.ERROR,"删除成功");	}	@Override	public Response<String> deleByIds(String ids) {		String[] id = ids.split(",");		List<Long> idList = new ArrayList<Long>();        for (String item : id) {            idList.add(new Long(item));        }		int count = resourceMapper.deleteBatchIds(idList);		if(count>0){			return new Response<String>(Response.SUCCESS,"删除资源成功");		}		return new Response<String>(Response.ERROR,"删除资源失败");	}	@Override	public Response<String> updateForManage(Resource resource,String type) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加资源成功");		/*if(null == resource.getSeq()){	    	resource.setSeq("0");	    }*/		//查看角色名称是否重复		if("1".equals(type)){			Map<String,Object> columnMap=new HashMap<>();			columnMap.put("resource_name", resource.getResourceName());			columnMap.put("parent_id", resource.getParentId());			columnMap.put("layer", resource.getLayer());			/*columnMap.put("seq", resource.getSeq());*/			List<Resource> resources=this.selectByMap(columnMap);			if(CollectionUtils.isNotEmpty(resources)){				resp.setCode(Response.ERROR);				resp.setMsg("资源名称已存在");				return resp;			}		}		resourceMapper.updateById(resource);		resp.setData(String.valueOf(resource.getId()));		return resp;	}	@Override	public Response<String> saveForManage(Resource resource) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加资源成功");		if(null == resource.getSeq() || "".equals(resource.getSeq())){			resource.setSeq("0");		}		//查看角色名称是否重复		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("resource_name", resource.getResourceName());		columnMap.put("parent_id", resource.getParentId());		columnMap.put("layer", resource.getLayer());		/*columnMap.put("seq", resource.getSeq());*/		List<Resource> resources=this.selectByMap(columnMap);		if(CollectionUtils.isNotEmpty(resources)){			resp.setCode(Response.ERROR);			resp.setMsg("资源名称已存在");			return resp;		}		resource.setId(idGenerator.generate());		resourceMapper.insert(resource);		resp.setData(String.valueOf(resource.getId()));		return resp;	}	/*	 * Resource resource,String pageSortFiled,String pageSortType	 */	@Override	public List<Resource> listForManage(Resource resource) {		// TODO Auto-generated method stub		// 组装page，页数、条数、排序字段、排序方式		/*Page<Resource> page = new Page<Resource>();        page.setOrderByField(pageSortFiled);        page.setAsc((null == pageSortType || "desc".equals(pageSortType)) ? false : true);		EntityWrapper<Resource> wrapper=new EntityWrapper<>(resource);*/		/*page = this.selectPage(page, wrapper);*/		/*EntityWrapper<Resource> wrapper=new EntityWrapper<>(resource);*/		/*List<Resource> list =this.selectList(wrapper);*/ /*page.getRecords();*//*selectList(wrapper)*/		List<Resource> list = new ArrayList<>();		String id = resource.getParentId();		if(StringUtils.isNotEmpty(id)){			list = resourceMapper.listResourceByPId(id);		}else{			list = resourceMapper.listResourceAll();		}		return list;	}	@Override	public List<ResourceListVO> listVoForManage(String id,Long accountId) {		List<Long> accountIdList = accountRoleMapper.seleByAccountIdList(accountId);		return resourceMapper.listVoForManage(id,accountIdList);	}	@Override	public List<Resource> listPIdOrIdFM(String id) {		return resourceMapper.listByPIdOrId(id);	}}