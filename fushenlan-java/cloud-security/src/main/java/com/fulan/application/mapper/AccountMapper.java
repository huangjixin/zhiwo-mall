package com.fulan.application.mapper;import java.util.List;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Select;import org.apache.ibatis.annotations.Update;import org.springframework.stereotype.Repository;import com.baomidou.mybatisplus.mapper.BaseMapper;import com.baomidou.mybatisplus.plugins.Page;import com.fulan.api.security.domain.Account;import com.fulan.api.security.vo.AccountAgentVo;import com.fulan.api.security.vo.AccountFuzzyQueryVO;import com.fulan.api.security.vo.AccountOffVo;import com.fulan.api.security.vo.AccountVO;@Mapperpublic interface AccountMapper extends BaseMapper<Account>{    Account selectByAccount(AccountVO accountVO);        List<Account> findByRoleId(Long roleId);        List<Account> findByOtherRoleId(@Param("roleId")String roleId ,@Param("accountName")String accountName,@Param("mobile")String mobile);        List<Account> findByAccountId(@Param("accountId")List<Long> accountId);    @Select(" SELECT t.target_value  FROM target t WHERE t.account_id = #{accountId} AND t.target_time = #{searchMonth} AND t.target_year = YEAR (NOW()) ")    String selectentryNumbyparams(@Param("accountId")Long accountId, @Param("searchMonth")Long searchMonth);       @Select(" SELECT sum(t.target_value)  FROM target t WHERE t.account_id = #{accountId} AND t.target_year = YEAR (NOW())")    String selectYeaytargetbyaccountId(@Param("accountId")Long accountId);           @Select(" select a.id from account  a where  a.company_id = #{companyId}  ")    List<Long> selectaccountIdsbycompanyId(@Param("companyId")String companyId);        List<AccountFuzzyQueryVO> findFuzzyByName(String name);        String selectteamYeaycountbyaccountId(@Param("accountIds")List<String> accountIds);            String selectteamMouthcountbyaccountId(@Param("accountIds")List<String> accountIds,@Param("searchMonth")Long searchMonth);        Account checkLogin(@Param("uName")String uName, @Param("pCode")String pCode);        List<Account> selectByAll(    		@Param("accountName")String accountName,            @Param("telephone")String telephone,            @Param("pageNo")int pageNo, 			@Param("pageSize")int pageSize,            Page<Account> pages            );            List<Account> selectByAllOther(    		@Param("accountName")String accountName,            @Param("mobile")String mobile            );        int selectByAllCount(@Param("accountName")String accountName,            @Param("mobile")String mobile);    List<Account> selectByCompanyId(@Param("companyId")String companyId);        List<AccountOffVo> accountOffVoList(Page<AccountOffVo> page,    		@Param("idList") List<Long> idList,			@Param("name") String name,            @Param("pageNo") int pageNo,            @Param("pageSize") int pageSize);        Integer accountOffVoCount(@Param("idList") List<Long> idList,@Param("name") String name);        List<Account> findByRoleIdAndName(@Param("roleId")Long roleId,@Param("name")String name);        List<Account> findByRoleType(    		@Param("type") String type,    		@Param("PID")Long PID,    		@Param("name")String name);    int selectCountNotInUserGroup(@Param("accountName")String accountName, @Param("mobile")String telephone);    List<Account> selectUsersNotInUserGroup(@Param("accountName")String accountName,            @Param("mobile")String telephone, Page<Account> pages);        @Update("update account  set password = #{password} where account_name = #{accountName}")    int updateByAccountName(Account account);        List<AccountAgentVo> selectAllAccountAgent();}