package com.fulan.application.controller;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import com.baomidou.mybatisplus.plugins.Page;import com.fulan.api.security.domain.Account;import com.fulan.api.security.domain.AgentBasicInformation;import com.fulan.api.security.domain.Role;import com.fulan.api.security.vo.AccountAgentVo;import com.fulan.api.security.vo.AccountFuzzyQueryVO;import com.fulan.api.security.vo.AccountVO;import com.fulan.application.mapper.AccountMapper;import com.fulan.application.orm.page.PageResponse;import com.fulan.application.orm.page.PageUtil;import com.fulan.application.service.AccountService;import com.fulan.application.service.impl.AccountServiceImpl;import com.fulan.application.util.domain.Response;import com.fulan.application.util.page.PageInfo;import com.fulan.core.monitoring.log.annotation.NoLog;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;@NoLog@Api(tags = "AccountApi", description = "账号接口")@RestController@RequestMapping(value = "/account")public class AccountController {	@Autowired	AccountService accountService;		@Autowired	AccountMapper accountMapper;	private static final Logger logger = LoggerFactory.getLogger(AccountController.class);	@ApiOperation(value = "新增账号", notes = "新增账号", response = Response.class)	@RequestMapping(value = "/add", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addAccount(HttpServletRequest request, @RequestBody AccountVO accountVO) {		try {			Account account = new Account();			BeanUtils.copyProperties(accountVO, account);			return accountService.save(account);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"新增账号失败");		}	}		@ApiOperation(value = "新增账号（招募入口）", notes = "新增账号（招募入口）", response = Response.class)	@RequestMapping(value = "/addAccountForEr", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<Account> addAccountForEr(HttpServletRequest request, @RequestBody AccountVO accountVO) {		try {			Account account = new Account();			BeanUtils.copyProperties(accountVO, account);			return accountService.saveAccountForEr(account);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<Account>(Response.ERROR,"新增账号失败");		}	}		@ApiOperation(value = "账户名称模糊查询", notes = "根据账户名称模糊查询账户id和账户name", response = Response.class)	@RequestMapping(value = "/findFuzzyByName", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<List<AccountFuzzyQueryVO>> findFuzzyByName(@RequestParam(required=true) String name) {		try {			return accountService.findFuzzyByName(name);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<List<AccountFuzzyQueryVO>>(Response.ERROR,"模糊查找账号信息失败");		}	}		@ApiOperation(value = "更新账号密码", notes = "更新账号密码", response = Response.class)	@RequestMapping(value = "/updatePassword", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> updatePassword(HttpServletRequest request, @RequestParam(required=true) Long id,			@RequestParam(required=true) String password) {				try {			accountService.updatePasswordById(password, id);			return new Response<String>(Response.SUCCESS, "更新密码成功");		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"更新密码失败");		}	}	@ApiOperation(value = "删除账号", notes = "删除账号", response = Response.class)	@RequestMapping(value = "/delete", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> delAccount(HttpServletRequest request, @RequestParam(required=true) Long id) {		try {			accountService.deleteById(id);			return new Response<String>(Response.SUCCESS, "删除账号成功");		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除账号失败");		}			}		@ApiOperation(value = "更新账号", notes = "更新账号", response = Response.class)	@RequestMapping(value = "/update", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> updateAccount(HttpServletRequest request, @RequestBody AccountVO accountVO) {		try {			Account account = new Account();			BeanUtils.copyProperties(accountVO, account);			accountService.update(account);			return accountService.update(account);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"更新账号失败");		}	}		@ApiOperation(value = "根据id查找账号", notes = "根据id查找账号", response = Response.class)	@RequestMapping(value = "/findById", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<Account> findById(HttpServletRequest request, @RequestParam(required=true) Long id) {				try {			Account account=accountService.findById(id);			Response<Account> resp=new Response<Account>(Response.SUCCESS, "查询成功");			resp.setData(account);			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<Account>(Response.ERROR,"查询账号失败");		}	}		@ApiOperation(value = "查询账号列表", notes = "查询账号列表", response = PageResponse.class)	@PostMapping(value = "/list")	@ResponseBody	public PageResponse list(AccountVO accountVO,PageInfo pageInfo) {		try {			Account account = new Account();			if(accountVO!=null){				BeanUtils.copyProperties(accountVO, account);			}			Page<Account> accounts=accountService.list(account,PageUtil.vice(pageInfo));			return PageResponse.ok(accounts);		} catch (Exception e) {			logger.error(e.getMessage());			return PageResponse.error();		}	}	@ApiOperation(value = "增加角色", notes = "增加角色", response = Response.class)	@RequestMapping(value = "/addRole", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addRole(HttpServletRequest request, @RequestParam(required=true) Long accountId,@RequestParam(required=true) Long roleId) {				try {			accountService.addRole(accountId,roleId);			Response<String> resp=new Response<String>(Response.SUCCESS, "增加角色成功");			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"增加角色失败");		}	}		@ApiOperation(value = "删除角色", notes = "删除角色", response = Response.class)	@RequestMapping(value = "/deleteRole", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> deleteRole(HttpServletRequest request, @RequestParam(required=true) Long accountId,@RequestParam(required=true) Long roleId) {				try {			accountService.deleteRole(accountId,roleId);			Response<String> resp=new Response<String>(Response.SUCCESS, "删除角色成功");			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除角色失败");		}	}			@ApiOperation(value = "按名称和公司id查询", notes = "按条件分页查询", response = Response.class)	// @GetMapping(value = "/findByNameAndCompanyId")	@RequestMapping(value = "/findByNameAndCompanyId", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<Account> findByNameAndCompanyId(@RequestParam(required=true) String name,@RequestParam(required=true) String companyId) {				Account accounts=accountService.findByNameAndCompanyId(name, companyId);		Response<Account> resp=new Response<Account>(Response.SUCCESS, "查询成功");		resp.setData(accounts);		return resp;	}		@ApiOperation(value = "查询角色", notes = "查询角色", response = Response.class)	@RequestMapping(value = "/findRoles", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<List<Role>> findRoles(HttpServletRequest request, @RequestParam(required=true) Long accountId) {				try {			List<Role> roles=accountService.findRoles(accountId);			Response<List<Role>> resp=new Response<List<Role>>(Response.SUCCESS, "查询角色成功");			resp.setData(roles);			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<List<Role>>(Response.ERROR,"查询角色失败");		}	}			@RequestMapping(value="/findByMap",method=RequestMethod.POST)	public List<Account> findByMap(@RequestBody Map searchMap){				return accountMapper.selectByMap(searchMap);			}	//	@RequestMapping(value="/checkLogin",method=RequestMethod.POST)//	public String checkLogin(@RequestParam(name="uName") String uName,//			@RequestParam(name="pCode") String pCode,HttpServletRequest request){//		return accountService.checkLogin(uName, pCode,request);//		//	}		@ApiOperation(value = "更新账号", notes = "更新账号(不对外开放)", response = Response.class)	@RequestMapping(value = "/updatePasswordByAccountName", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> updatePasswordByAccountName(@RequestBody Account account) {		try {			return accountService.updateByAccountName(account);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"更新账号失败");		}	}	@RequestMapping(value="/selectAllAccountAgent",method=RequestMethod.GET)	@ResponseBody	public List<AccountAgentVo> selectAllAccountAgent(){		try {		return accountService.selectAllAccountAgent();		} catch (Exception e) {			logger.error("查询异常----"+e.getMessage());			return null;		}  }}