package com.fulan.application.manage.controller;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.domain.Role;import com.fulan.api.security.vo.RoleAndResourceVo;import com.fulan.application.service.RoleService;import com.fulan.application.util.domain.Response;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;@RestController@RequestMapping(value = "/mamage/roleService")public class ManageRoleController {	@Autowired	RoleService roleService;	private static final Logger logger = LoggerFactory.getLogger(ManageRoleController.class);	@RequestMapping(value = "/add", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addRole(HttpServletRequest request, @RequestBody Role role,@RequestParam("type") String type) {		try {			if(null != role.getId()){				return roleService.updateForManage(role,type);			}			return roleService.saveForManage(role);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"新增角色失败");		}	}		@RequestMapping(value = "/findById", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<Role> findById(HttpServletRequest request, Long id) {		Response<Role> response = new Response<>();		try {			response.setCode(Response.SUCCESS);			response.setMsg("查询角色成功");			response.setData(roleService.findById(id));			return response;		} catch (Exception e) {			logger.error(e.getMessage());			response.setCode(Response.ERROR);			response.setMsg("查询角色失败");			return response;		}			}	@RequestMapping(value = "/delete", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> delRole(HttpServletRequest request, @RequestParam(required=true) Long id) {		try {			roleService.deleteById(id);			return new Response<String>(Response.SUCCESS, "删除角色成功");		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除角色失败");		}	}		/*@RequestMapping(value = "/update", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> updateRole(HttpServletRequest request, @RequestBody Role role) {		try {			return roleService.updateForManage(role);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"更新角色失败");		}	}*/		@PostMapping(value = "/list")	@ResponseBody	public Response<List<Role>> list() {		Response<List<Role>> response = new Response<List<Role>>();		try {			List<Role> list=roleService.listForManage();			response.setData(list);			response.setCode(Response.SUCCESS);			response.setMsg("查询角色成功");			return response;		} catch (Exception e) {			logger.error(e.getMessage());			response.setCode(Response.ERROR);			response.setMsg("查询角色失败");			return response;		}	}	@RequestMapping(value = "/addResource", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addResource(HttpServletRequest request, @RequestParam(required=true) Long resourceId,@RequestParam(required=true) Long roleId) {				try {			roleService.addResource(resourceId,roleId);			Response<String> resp=new Response<String>(Response.SUCCESS, "增加资源成功");			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"增加资源失败");		}	}		@RequestMapping(value = "/deleteResource", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> deleteResource(HttpServletRequest request, @RequestParam(required=true) Long resourceId,@RequestParam(required=true) Long roleId) {				try {			roleService.deleteResource(resourceId,roleId);			Response<String> resp=new Response<String>(Response.SUCCESS, "删除资源成功");			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除资源失败");		}	}		@RequestMapping(value = "/findResources", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<List<Resource>> findResources(HttpServletRequest request, @RequestParam(required=true) Long roleId) {				try {			List<Resource> resources=roleService.findResources(roleId,null);			Response<List<Resource>> resp=new Response<List<Resource>>(Response.SUCCESS, "查询资源成功");			resp.setData(resources);			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<List<Resource>>(Response.ERROR,"查询资源失败");		}	}		@RequestMapping(value = "/findRAR", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public List<RoleAndResourceVo> findRoleAndResource(@RequestParam(name = "id" ,defaultValue="")String id){		List<RoleAndResourceVo> list = roleService.findRoleAndResource(id);		return list;	}		@RequestMapping(value = "/findResourceByRoleId", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public List<Resource> findResourceByRoleId(@RequestParam("roleId")Long roleId){		List<Resource> findResources = roleService.findResourceByRoleId(roleId);		return findResources;	}}