package com.fulan.application.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.collections.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.domain.RoleResource;import com.fulan.application.mapper.RoleResourceMapper;import com.fulan.application.service.RoleResourceService;import com.fulan.application.util.domain.Response;@Servicepublic class RoleResourceServiceImpl extends ServiceImpl<RoleResourceMapper, RoleResource> implements RoleResourceService{	@Autowired	RoleResourceMapper roleResourceMapper;	@Override	public List<RoleResource> findByResourceId(Long resourceId) {		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("resourceId", resourceId);		return roleResourceMapper.selectByMap(columnMap);	}	@Override	public RoleResource findById(Long id) {		return roleResourceMapper.selectById(id);	}	@Override	public List<RoleResource> findByRoleId(Long roleId) {		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_id", roleId);		return roleResourceMapper.selectByMap(columnMap);	}	@Override	public Response<String> save(RoleResource roleResource) {		//检查账号是否存在		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_id", roleResource.getRoleId());		columnMap.put("resource_id", roleResource.getResourceId());		List<RoleResource> rrs=roleResourceMapper.selectByMap(columnMap);		Response<String> resp=new Response<String>(Response.SUCCESS, "添加角色资源成功");		if(CollectionUtils.isNotEmpty(rrs)){			resp.setCode(Response.ERROR);			resp.setMsg("角色资源已存在");			return resp;		}		// TODO 设置id		roleResourceMapper.insert(roleResource);		return resp;	}	@Override	public int deleteById(Long id) {		return roleResourceMapper.deleteById(id);	}	@Override	public Page<RoleResource> listByPage(Integer pageNo, Integer pageSize, RoleResource roleResource) {		EntityWrapper<RoleResource> wrapper=new EntityWrapper<>(roleResource);		Page<RoleResource> page=new Page<>(pageNo,pageSize);		return this.selectPage(page, wrapper);	}	@Override	public Response<String> deleteBatch(String ids) {		String[] id = ids.split(",");		List<Long> idList = new ArrayList<Long>();        for (String item : id) {            idList.add(new Long(item));        }		int count = roleResourceMapper.deleteBatchIds(idList);		if(count>0){			return new Response<String>(Response.SUCCESS,"删除角色资源成功");		}		return new Response<String>(Response.ERROR,"删除角色资源失败");	}	@Override	public List<RoleResource> seleByRoleId(RoleResource roleResource, String pageSortFiled, String pageSortType) {		Page<RoleResource> page = new Page<RoleResource>();        page.setOrderByField(pageSortFiled);        page.setAsc((null == pageSortType || "desc".equals(pageSortType)) ? false : true);		EntityWrapper<RoleResource> wrapper=new EntityWrapper<>(roleResource);		page = this.selectPage(page, wrapper);		List<RoleResource> list = page.getRecords();/*selectList(wrapper)*/		return list;	}	@Override	public Response<String> saveRoleBatch(String roleId, String resourceIds) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加角色资源成功");		RoleResource roleResource = new RoleResource();	    roleResource.setRoleId(Long.valueOf(roleId));		EntityWrapper<RoleResource> wrapper=new EntityWrapper<>(roleResource);		int count =roleResourceMapper.selectCount(wrapper);		if(count != 0){			count = roleResourceMapper.delete(wrapper);			if(count==0){				resp = new Response<String>(Response.ERROR, "添加角色资源失败");			}		}		// TODO 设置id		String[] id = resourceIds.split(",");        for (String resourceId : id) {        	roleResource.setRoleId(Long.valueOf(roleId));        	roleResource.setResourceId(Long.valueOf(resourceId));        	count = roleResourceMapper.insert(roleResource);        	if(count==0){        		resp = new Response<String>(Response.ERROR, "添加角色资源失败");        		break;        	}        }		return resp;	}		}