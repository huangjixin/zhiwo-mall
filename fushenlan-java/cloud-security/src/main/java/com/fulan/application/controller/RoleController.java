package com.fulan.application.controller;import java.util.List;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import com.baomidou.mybatisplus.plugins.Page;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.domain.Role;import com.fulan.api.security.vo.RoleVO;import com.fulan.application.orm.page.PageResponse;import com.fulan.application.orm.page.PageUtil;import com.fulan.application.service.RoleService;import com.fulan.application.util.domain.Response;import com.fulan.application.util.page.PageInfo;import com.fulan.core.monitoring.log.annotation.NoLog;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;@NoLog@Api(tags = "RoleApi", description = "角色接口")@RestController@RequestMapping(value = "/role")public class RoleController {	@Autowired	RoleService roleService;	private static final Logger logger = LoggerFactory.getLogger(RoleController.class);	@ApiOperation(value = "新增角色", notes = "新增角色", response = Response.class)	@RequestMapping(value = "/add", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addRole(HttpServletRequest request, @RequestBody RoleVO roleVO) {		try {			Role role = new Role();			BeanUtils.copyProperties(roleVO, role);			return roleService.save(role);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"新增角色失败");		}	}	@ApiOperation(value = "删除角色", notes = "删除角色", response = Response.class)	@RequestMapping(value = "/delete", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> delRole(HttpServletRequest request, @RequestParam(required=true) Long id) {		try {			roleService.deleteById(id);			return new Response<String>(Response.SUCCESS, "删除角色成功");		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除角色失败");		}	}		@ApiOperation(value = "更新角色", notes = "更新角色", response = Response.class)	@RequestMapping(value = "/update", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> updateRole(HttpServletRequest request, @RequestBody RoleVO roleVO) {		try {			Role role = new Role();			BeanUtils.copyProperties(roleVO, role);			roleService.updateRole(role);			return roleService.updateRole(role);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"更新角色失败");		}	}		@ApiOperation(value = "分页查询角色", notes = "分页查询角色", response = Response.class)	@PostMapping(value = "/list")	@ResponseBody	public PageResponse list(RoleVO roleVO,PageInfo pageInfo) {		try {			Role role = new Role();			BeanUtils.copyProperties(roleVO, role);			Page<Role> roles=roleService.list(role,PageUtil.vice(pageInfo));			return PageResponse.ok(roles);		} catch (Exception e) {			logger.error(e.getMessage());			return PageResponse.error();		}	}	@ApiOperation(value = "增加资源", notes = "增加资源", response = Response.class)	@RequestMapping(value = "/addResource", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addResource(HttpServletRequest request, @RequestParam(required=true) Long resourceId,@RequestParam(required=true) Long roleId) {				try {			roleService.addResource(resourceId,roleId);			Response<String> resp=new Response<String>(Response.SUCCESS, "增加资源成功");			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"增加资源失败");		}	}		@ApiOperation(value = "删除资源", notes = "删除资源", response = Response.class)	@RequestMapping(value = "/deleteResource", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> deleteResource(HttpServletRequest request, @RequestParam(required=true) Long resourceId,@RequestParam(required=true) Long roleId) {				try {			roleService.deleteResource(resourceId,roleId);			Response<String> resp=new Response<String>(Response.SUCCESS, "删除资源成功");			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除资源失败");		}	}		@ApiOperation(value = "查询资源", notes = "查询资源", response = Response.class)	@RequestMapping(value = "/findResources", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<List<Resource>> findResources(HttpServletRequest request, @RequestParam(required=true) Long roleId) {				try {			List<Resource> resources=roleService.findResources(roleId,null);			Response<List<Resource>> resp=new Response<List<Resource>>(Response.SUCCESS, "查询资源成功");			resp.setData(resources);			return resp;		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<List<Resource>>(Response.ERROR,"查询资源失败");		}	}}