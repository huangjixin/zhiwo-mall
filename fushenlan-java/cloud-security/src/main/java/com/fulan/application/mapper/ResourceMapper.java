package com.fulan.application.mapper;import java.util.List;import java.util.Map;import java.util.Set;import org.apache.ibatis.annotations.Delete;import org.apache.ibatis.annotations.Many;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Result;import org.apache.ibatis.annotations.Results;import org.apache.ibatis.annotations.Select;import org.springframework.stereotype.Repository;import org.springframework.web.bind.annotation.RequestParam;import com.baomidou.mybatisplus.mapper.BaseMapper;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.vo.ResourceListVO;@Repositorypublic interface ResourceMapper extends BaseMapper<Resource>{		@Select("select re.id as id,re.resource_name as resource_name,re.enabled as enabled,"+	"re.icon as icon,re.resource_type as resource_type,re.url as url,re.parent_id as parent_id"+	" from resource re left join role_resource rr on (rr.resource_id = re.id)  where rr.role_id=#{id}")	@Results({		@Result(property = "id" ,column="id"),		@Result(property = "resourceName" ,column="resource_name"),		@Result(property = "enabled" ,column="enabled"),		@Result(property = "icon" ,column="icon"),		@Result(property = "resourceType" ,column="resource_type"),		@Result(property = "url" ,column="url"),		@Result(property = "parentId" ,column="parent_id")	})	List<Resource> listResource(@RequestParam("id") Long id);		@Delete("delete from resource where id = #{parentId} ")	int deleByParentId(@RequestParam("parentId") Long parentId);		/*@Select("select * from resource where parent_id = #{id}")*/	@Select("<script>"+			"select r.* from role_resource rr"+			" inner join resource r on rr.resource_id = r.id"+			" where 1=1 and r.parent_id=#{id}"+ 			"<if test='accountIdList!=null'> "+			" and rr.role_id in"+			"<foreach collection='accountIdList' item='listItem' open='(' close=')' separator=',' >"+		    " #{listItem}"+		    "</foreach>"+			"</if>"+			" group by r.id order by r.seq asc"+			"</script>")	@Results({		@Result(property = "id" ,column="id"),		@Result(property = "resourceName" ,column="resource_name"),		@Result(property = "enabled" ,column="enabled"),		@Result(property = "icon" ,column="icon"),		@Result(property = "resourceType" ,column="resource_type"),		@Result(property = "url" ,column="url"),		@Result(property = "parentId" ,column="parent_id"),        @Result(property = "list" , javaType=List.class, column = "id",                many = @Many(select = ("com.fulan.application.mapper.ResourceMapper.listByParentId")))	})	List<ResourceListVO> listVoForManage(@Param("id") String id,@Param("accountIdList") List<Long> accountIdList);		@Select("select * from resource"+			" where parent_id=#{id}"+ 			" order by seq asc")	@Results({		@Result(property = "id" ,column="id"),		@Result(property = "resourceName" ,column="resource_name"),		@Result(property = "enabled" ,column="enabled"),		@Result(property = "icon" ,column="icon"),		@Result(property = "resourceType" ,column="resource_type"),		@Result(property = "url" ,column="url"),		@Result(property = "parentId" ,column="parent_id")	})	List<Resource> listByParentId(@Param("id")Long id);		@Select("select * from resource where id = #{id} or parent_id = #{id} order by layer asc")	@Results({		@Result(property = "id" ,column="id"),		@Result(property = "resourceName" ,column="resource_name"),		@Result(property = "enabled" ,column="enabled"),		@Result(property = "icon" ,column="icon"),		@Result(property = "resourceType" ,column="resource_type"),		@Result(property = "url" ,column="url"),		@Result(property = "parentId" ,column="parent_id")	})	List<Resource> listByPIdOrId(String id);		@Select("select * from resource where parent_id=#{id} "+			"union "+			"select r2.* from resource r1 "+			"inner join resource r2 on r2.parent_id = r1.id where r1.parent_id=#{id} order by seq asc")	@Results({		@Result(property = "id" ,column="id"),		@Result(property = "resourceName" ,column="resource_name"),		@Result(property = "enabled" ,column="enabled"),		@Result(property = "icon" ,column="icon"),		@Result(property = "resourceType" ,column="resource_type"),		@Result(property = "url" ,column="url"),		@Result(property = "parentId" ,column="parent_id")	})	List<Resource> listResourceByPId(@RequestParam("id") String id);		@Select("select * from resource order by layer asc")	@Results({		@Result(property = "id" ,column="id"),		@Result(property = "resourceName" ,column="resource_name"),		@Result(property = "enabled" ,column="enabled"),		@Result(property = "icon" ,column="icon"),		@Result(property = "resourceType" ,column="resource_type"),		@Result(property = "url" ,column="url"),		@Result(property = "parentId" ,column="parent_id")	})	List<Resource> listResourceAll();	}