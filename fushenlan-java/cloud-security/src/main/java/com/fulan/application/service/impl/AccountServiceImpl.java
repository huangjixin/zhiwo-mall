package com.fulan.application.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import com.fulan.api.security.vo.AccountAgentVo;import com.fulan.api.security.vo.AccountFuzzyQueryVO;import com.fulan.api.security.vo.AccountOffVo;import com.fulan.api.security.vo.AccountVO;import com.fulan.api.system.domain.Level;import com.fulan.api.system.domain.Organization;import com.fulan.api.system.manage.ManageOrganizationService;import com.fulan.api.system.service.LevelService;import com.fulan.application.orm.id.GenerateVOUtil;import org.apache.commons.collections.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.fulan.api.security.domain.Account;import com.fulan.api.security.domain.AccountManageVo;import com.fulan.api.security.domain.AccountRole;import com.fulan.api.security.domain.Role;import com.fulan.application.mapper.AccountMapper;import com.fulan.application.mapper.AccountRoleMapper;import com.fulan.application.mapper.RoleMapper;import com.fulan.application.orm.id.IdGenerator;import com.fulan.application.service.AccountService;import com.fulan.application.util.domain.Response;import com.fulan.application.util.md5.MD5Util;import com.fulan.application.util.page.PageInfo;import com.fulan.application.util.page.PageUtil;@Servicepublic class AccountServiceImpl extends ServiceImpl<AccountMapper, Account> implements AccountService{	@Autowired	AccountRoleMapper accountRoleMapper;	@Autowired	AccountMapper accountMapper;	@Autowired	RoleMapper roleMapper;		@Autowired	IdGenerator idGenerator;		@Autowired	private LevelService levelService;		@Autowired	private ManageOrganizationService manageOrganizationService;	@Override	public Account findByNameAndCompanyId(String name, String companyId) {		Account account=new Account();		account.setAccountName(name);		account.setCompanyId(companyId);		EntityWrapper<Account> wrapper=new EntityWrapper<>(account);				return this.selectOne(wrapper);	}	@Override	public Account findByName(String name) {		Account account=new Account();		account.setAccountName(name);		EntityWrapper<Account> wrapper=new EntityWrapper<>(account);				return this.selectOne(wrapper);	}	@Override	public Response<String> save(Account account) {		//检查账号是否存在		Account account1=this.findByNameAndCompanyId(account.getAccountName(), account.getCompanyId());		Response<String> resp=new Response<String>(Response.SUCCESS, "添加账号成功");		if(null!=account1){			resp.setCode(Response.ERROR);			resp.setMsg("账号已存在");			return resp;		}		account.setId(idGenerator.generate());		account.setPassword(MD5Util.MD5(account.getPassword()));		this.insert(account);		return resp;	}		/* (non-Javadoc)	 * @see com.fulan.application.service.AccountService#saveAccountForEr(com.fulan.api.security.domain.Account)	 */	@Override	public Response<Account> saveAccountForEr(Account account) {		//检查账号是否存在		Account account1=this.findByNameAndCompanyId(account.getAccountName(), account.getCompanyId());		Response<Account> resp=new Response<Account>(Response.SUCCESS, "添加账号成功");		if(null!=account1){			account1.setPassword(MD5Util.getMD5(account1.getPassword()));			resp.setData(account1);			resp.setCode(Response.SUCCESS);			resp.setMsg("账号已存在");			return resp;		}				account.setId(idGenerator.generate());		String password = account.getPassword();		account.setPassword(MD5Util.MD5(account.getPassword()));		this.insert(account);		account.setPassword(password);		resp.setData(account);		return resp;	}		@Override	public Response<String> insertAccount(Account account) {		//检查账号是否存在		Account account1=this.findByName(account.getAccountName());		Response<String> resp=new Response<String>(Response.SUCCESS, "添加账号成功");		if(account1!=null){			if(account1.getDelete()!=true) {				resp.setCode(Response.ERROR);				resp.setMsg("账号已存在");				return resp;			}		}		account.setId(idGenerator.generate());		account.setPassword(MD5Util.MD5(account.getPassword()));		account.setDelete(false);  //对应的数据库字段是is_delete =0的		this.insert(account);		return resp;	}	@Override	public void updatePasswordById(String password,Long id) {		Account account=new Account();		account.setId(id);		// TODO password的加密和解密		account.setPassword(MD5Util.MD5(password));		this.updateById(account);	}	@Override	public void deleteById(Long id) {		baseMapper.deleteById(id);	}		@Override	public void deleteAccountById(Long id) {		this.deleteById(id);	}	@Override	public Response<String> update(Account account) {		//检查账号是否存在		Account account1=this.findByNameAndCompanyId(account.getAccountName(), account.getCompanyId());		Response<String> resp=new Response<String>(Response.SUCCESS, "账号修改成功");		if(null!=account1){			resp.setCode(Response.ERROR);			resp.setMsg("账号已存在");			return resp;		}		this.updateById(account);		return resp;	}		@Override	public Response<String> updateAccount(Account account) {		Response<String> resp=new Response<String>(Response.SUCCESS, "账号修改成功");		Account findById = findById(account.getId());		if(!(findById.getAccountName().equals(account.getAccountName()))) {			//检查账号是否存在			Account account1=this.findByName(account.getAccountName());			if(account1!=null){				if(account1.getId()!=0) {					resp.setCode(Response.ERROR);					resp.setMsg("账号已存在");					return resp;				}			}		}		this.updateById(account);		return resp;	}	@Override	public Account findById(Long id) {		return this.selectById(id);	}	@Override	public Page<Account> list(Account account,Page<Account> page) {		EntityWrapper<Account> wrapper=new EntityWrapper<>(account);		return this.selectPage(page, wrapper);	}	 @Override	    public Page<Account> listByPage(Long id, boolean locked,int pageNo, int pageSize, String pageSortFiled, String pageSortType,String type) {	        // 组装page，页数、条数、排序字段、排序方式	        Page<Account> page = new Page<Account>(pageNo, pageSize);	        page.setOrderByField(pageSortFiled);	        page.setAsc((null == pageSortType || "desc".equals(pageSortType)) ? false : true);	        Account account = new Account();	        if("manage".equals(type)) {//表示大后台调用	        	  if(id!=0) {	        		  account.setId(id);	        		  account.setDelete(false);	        	  }	        }else {	        	 if(id!=0) {		        	 account.setId(id);		        	 account.setLocked(locked);		        	 account.setDelete(false);		        }	        }	        EntityWrapper<Account> ew = new EntityWrapper<>(account);	        return this.selectPage(page, ew);	    }	@Transactional(rollbackFor = Exception.class)	@Override	public Response<String> addRole(Long accountId, Long roleId) {		//检查账号是否存在		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_id", roleId);		columnMap.put("account_id", accountId);		List<AccountRole> ars=accountRoleMapper.selectByMap(columnMap);		Response<String> resp=new Response<String>(Response.SUCCESS, "添加账号角色成功");		if(CollectionUtils.isNotEmpty(ars)){			resp.setCode(Response.ERROR);			resp.setMsg("账号角色已存在");			return resp;		}		AccountRole accountRole=new AccountRole();		accountRole.setId(idGenerator.generate());		accountRole.setAccountId(accountId);		accountRole.setRoleId(roleId);		accountRoleMapper.insert(accountRole);		return resp;	}	@Transactional(rollbackFor = Exception.class)	@Override	public void deleteRole(Long accountId, Long roleId) {		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_id", roleId);		columnMap.put("account_id", accountId);		accountRoleMapper.deleteByMap(columnMap);	}	@Override	public List<Role> findRoles(Long accountId) {		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("account_id", accountId);		List<AccountRole> accountRoles=accountRoleMapper.selectByMap(columnMap);		List<Role> roles=new ArrayList<Role>();		for(AccountRole accountRole:accountRoles){			roles.add(roleMapper.selectById(accountRole.getRoleId()));		}		return roles;	}	@Override	public List<Long> selectRoles(Long accountId) {		List<Long> ar = accountRoleMapper.selectRoles(accountId);		return ar;	}	@Override	public Long saveAccount(Account account){		Account user=this.findByName(account.getAccountName());		if(null!=user){			return user.getId();		}		Long accountId = GenerateVOUtil.generate(account);		this.insert(account);		return accountId;	}	@Override	public Account selectByAccount(AccountVO accountVO) {		return accountMapper.selectByAccount(accountVO);	}		@Override	public List<Account> findByRoleId(Long roleId) {		return accountMapper.findByRoleId(roleId);	}		@Override	public List<Account> findByAccountId(List<Long> accountId) {		return accountMapper.findByAccountId(accountId);	}		public String selectentryNumbyparams(Long accountId, Long searchMonth){				return accountMapper.selectentryNumbyparams(accountId, searchMonth);	}			public  String selectYeaytargetbyaccountId(Long accountId){				return accountMapper.selectYeaytargetbyaccountId(accountId);	}			public List<Long> selectaccountIdsbycompanyId(String companyId){		return accountMapper.selectaccountIdsbycompanyId(companyId);	}		@Override	public String selectteamyeartargetbyaccountIds(List<String> accountIds) {						return accountMapper.selectteamYeaycountbyaccountId(accountIds);	}	@Override	public String selectteamMouthtargetbyaccountIds(List<String> accountIds, Long searchMonth) {						return accountMapper.selectteamMouthcountbyaccountId(accountIds, searchMonth);	}//	@Override//	public String checkLogin(String uName, String pCode) {//		Account acc = accountMapper.checkLogin(uName, pCode);//		if(null!=acc){//		   return "success";//		}else{//			return "fail";//		}//	}	@Override	public List<Account> selectByAll(String accountName,String mobile) {		return accountMapper.selectByAllOther(accountName, mobile);	}	@Override	public List<Account> selectByCompanyId(String companyId) {				return accountMapper.selectByCompanyId(companyId);	}	@Override	public PageInfo<AccountOffVo> selectByNameOff(Page<AccountOffVo> page,List<Long> idList, String name, int pageNo, int pageSize) {		PageInfo<AccountOffVo> pageInfo = new PageInfo<AccountOffVo>();		int total = accountMapper.accountOffVoCount(idList,name);		pageInfo.setRecords(accountMapper.accountOffVoList(page,idList, name, pageNo, pageSize));		pageInfo.setPageNo(page.getCurrent());		pageInfo.setPageSize(page.getSize());		pageInfo.setPageTotal(PageUtil.getPages(pageSize,total));		pageInfo.setPageRecords(page.getTotal());		return pageInfo;	}	@Override	public PageInfo<AccountManageVo> listByPages(Page<AccountManageVo> page, String accountName, String telephone,			int pageNo, int pageSize) {				PageInfo<AccountManageVo> pageInfo = new PageInfo<AccountManageVo>();		List<AccountManageVo> avoList = new ArrayList<>();				Page<Account> pages = new Page<Account>(pageNo,pageSize);		List<Account> accountList = accountMapper.selectByAll(accountName, telephone, pageNo, pageSize,pages);				for(Account account : accountList ){			AccountManageVo ao = new AccountManageVo();			if(account.getPostType()!=null){				String levelCode = account.getPostType().toString();				Level level = levelService.selectByLevelCode(levelCode);				if(null!=level){					ao.setPostName(level.getLevelName());				}			}			if(account.getCompanyId()!=null){				Organization organization = manageOrganizationService.getOrganizationById(account.getCompanyId());				if(null!=organization){					ao.setCompanyName(organization.getCnName());				}							}						List<String> strList = accountRoleMapper.selectAccountRoleManageMinVo(account.getId());			if(strList.size()>0){				String strz ="";				for(String str :strList ){					strz+=str+" ";				}				ao.setRoles(strz);			}			ao.setId(account.getId());			ao.setAccountName(account.getAccountName());			ao.setTelephone(account.getTelephone());			ao.setMobile(account.getMobile());			ao.setEmail(account.getEmail());			avoList.add(ao);		}		int total = accountMapper.selectByAllCount(accountName, telephone);		pageInfo.setRecords(avoList);		pageInfo.setPageNo(page.getCurrent());		pageInfo.setPageSize(page.getSize());		pageInfo.setPageTotal(PageUtil.getPages(pageSize,total));		pageInfo.setPageRecords(page.getTotal());		return pageInfo;	}	@Override	public List<Account> findByRoleIdAndName(Long roleId, String name) {		return accountMapper.findByRoleIdAndName(roleId, name);	}	@Override	public Response<List<Account>> findByRoleType(String type, Long PID,String name) {		// TODO Auto-generated method stub		Response<List<Account>> response = new Response<List<Account>>(Response.SUCCESS,"访问成功");		response.setData(accountMapper.findByRoleType(type, PID, name));		return response;	}			@Override	public List<Account> findByOtherRoleId(String roleId, String accountName, String mobile) {				return accountMapper.findByOtherRoleId(roleId, accountName, mobile);	}	@Override	public Response<List<AccountFuzzyQueryVO>> findFuzzyByName(String name) {		Response<List<AccountFuzzyQueryVO>> response = new Response<List<AccountFuzzyQueryVO>>(Response.SUCCESS,"访问成功");		List<AccountFuzzyQueryVO> accountFuzzyQueryVO = accountMapper.findFuzzyByName(name);		response.setCode(Response.SUCCESS);		response.setData(accountFuzzyQueryVO);		return response;	}    @Override    public PageInfo<AccountManageVo> listByPagesNotInUserGroup(            Page<AccountManageVo> page, String accountName, String telephone,            int pageNo, int pageSize) {        PageInfo<AccountManageVo> pageInfo = new PageInfo<AccountManageVo>();        List<AccountManageVo> avoList = new ArrayList<>();                Page<Account> pages = new Page<Account>(pageNo,pageSize);        List<Account> accountList = accountMapper.selectUsersNotInUserGroup(accountName, telephone,pages);                for(Account account : accountList ){            AccountManageVo ao = new AccountManageVo();            if(account.getPostType()!=null){                Level level = levelService.selectOne(account.getPostType().toString());                if(null!=level){                    ao.setPostName(level.getLevelName());                }            }//            if(account.getCompanyId()!=null){//                Organization organization = manageOrganizationService.getOrganizationById(account.getCompanyId());//                if(null!=organization){//                    ao.setCompanyName(organization.getCnName());//                }//                //            }                        List<String> strList = accountRoleMapper.selectAccountRoleManageMinVo(account.getId());            if(strList.size()>0){                String strz ="";                for(String str :strList ){                    strz+=str+" ";                }                ao.setRoles(strz);            }            ao.setId(account.getId());            ao.setAccountName(account.getAccountName());            ao.setTelephone(account.getTelephone());            ao.setMobile(account.getMobile());            ao.setEmail(account.getEmail());            avoList.add(ao);        }        int total = accountMapper.selectCountNotInUserGroup(accountName, telephone);        pageInfo.setRecords(avoList);        pageInfo.setPageNo(page.getCurrent());        pageInfo.setPageSize(page.getSize());        pageInfo.setPageTotal(PageUtil.getPages(pageSize,total));        pageInfo.setPageRecords(page.getTotal());        return pageInfo;    }	/* (non-Javadoc)	 * @see com.fulan.application.service.AccountService#updateByAccountName(com.fulan.api.security.domain.Account)	 */	@Override	public Response<String> updateByAccountName(Account account) {		// TODO Auto-generated method stub		account.setPassword(MD5Util.MD5(account.getPassword()));		accountMapper.updateByAccountName(account);		return new Response<String>(Response.SUCCESS,"修改成功");	}	@Override	public List<AccountAgentVo> selectAllAccountAgent() {		return accountMapper.selectAllAccountAgent();	}		}