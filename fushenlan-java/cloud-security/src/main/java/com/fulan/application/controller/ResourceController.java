package com.fulan.application.controller;import javax.servlet.http.HttpServletRequest;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import com.baomidou.mybatisplus.plugins.Page;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.vo.ResourceVO;import com.fulan.application.orm.page.PageResponse;import com.fulan.application.orm.page.PageUtil;import com.fulan.application.service.ResourceService;import com.fulan.application.util.domain.Response;import com.fulan.application.util.page.PageInfo;import com.fulan.core.monitoring.log.annotation.NoLog;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;@NoLog@Api(tags = "ResourceApi", description = "资源接口")@RestController@RequestMapping(value = "/resource")public class ResourceController {	@Autowired	ResourceService resourceService;	private static final Logger logger = LoggerFactory.getLogger(ResourceController.class);	@ApiOperation(value = "新增资源", notes = "新增资源", response = Response.class)	@RequestMapping(value = "/add", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> addResource(HttpServletRequest request, @RequestBody ResourceVO resourceVO) {		try {			Resource resource = new Resource();			BeanUtils.copyProperties(resourceVO, resource);			return resourceService.save(resource);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"新增资源失败");		}	}	@ApiOperation(value = "删除资源", notes = "删除资源", response = Response.class)	@RequestMapping(value = "/delete", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> delResource(HttpServletRequest request, @RequestParam(required=true) Long id) {		try {			resourceService.deleteById(id);			return new Response<String>(Response.SUCCESS, "删除资源成功");		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"删除资源失败");		}	}		@ApiOperation(value = "更新资源", notes = "更新资源", response = Response.class)	@RequestMapping(value = "/update", produces = { "application/json;charset=utf-8" }, method = RequestMethod.POST)	public Response<String> updateResource(HttpServletRequest request, @RequestBody ResourceVO resourceVO) {		try {			Resource resource = new Resource();			BeanUtils.copyProperties(resourceVO, resource);			return resourceService.update(resource);		} catch (Exception e) {			logger.error(e.getMessage());			return new Response<String>(Response.ERROR,"更新资源失败");		}	}		@ApiOperation(value = "分页查询资源", notes = "分页查询资源", response = Response.class)	@PostMapping(value = "/list")	@ResponseBody	public PageResponse list(ResourceVO resourceVO,PageInfo pageInfo) {		try {			Resource resource = new Resource();			BeanUtils.copyProperties(resourceVO, resource);			Page<Resource> resources=resourceService.list(resource,PageUtil.vice(pageInfo));			return PageResponse.ok(resources);		} catch (Exception e) {			logger.error(e.getMessage());			return PageResponse.error();		}	}}