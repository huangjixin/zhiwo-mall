package com.fulan.application.controller;import java.util.HashMap;import java.util.List;import java.util.Map;import io.swagger.annotations.ApiOperation;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.baomidou.mybatisplus.plugins.Page;import com.fulan.api.security.domain.AccountGroup;import com.fulan.api.security.domain.UserGroup;import com.fulan.api.security.vo.AccountGroupVo;import com.fulan.application.service.AccountGroupService;import com.fulan.application.service.GroupService;import com.fulan.application.util.domain.Response;import com.fulan.application.util.page.PageInfo;@RestController@RequestMapping("/manage/group")public class GroupController {	@Autowired	private GroupService groupService;		@Autowired	private AccountGroupService accountGroupService;	private static final Logger logger = LoggerFactory.getLogger(GroupController.class);	@ApiOperation(value = "分页条件查询", notes = "分页条件查询", response = Response.class)	@RequestMapping(value = "/listByParam")	public PageInfo<UserGroup> listGroup(@RequestBody UserGroup group,             @RequestParam(value="pageNo", required=false, defaultValue="1") int pageNo,            @RequestParam(value="pageSize", required=false, defaultValue="10") int pageSize,             @RequestParam(value="pageSortFiled", required=false, defaultValue = "id") String pageSortFiled,            @RequestParam(value="pageSortType", required=false, defaultValue = "DESC") String pageSortType ) {	    	    try {	        PageInfo<UserGroup> page = groupService.listByParam(group, pageNo, pageSize, pageSortFiled, pageSortType);	        return page;        } catch (Exception e) {            logger.error("查询异常----"+e.getMessage());            return null;        }	   	}		/**     *保存修改     * @param group     * @param tagStr 标签字符串     * @param userStr 用户字符串     * @return     */	@RequestMapping(value = "/saveGroup", method = RequestMethod.POST)    public int saveGroup(@RequestBody UserGroup group,             @RequestParam(value="tagStr",required=false)String tagStr,             @RequestParam(value="userStr",required=false) String userStr,            @RequestParam(value="newTag", required=false) String newTag) {	    try {            return groupService.saveGroup(group, tagStr, userStr, newTag);        } catch (Exception e) {            logger.error("保存异常----"+e.getMessage());            return 0;        }	}            /**     * 删除     * @param groupIds     * @return     */    @PostMapping(value = "/deleteGroup")    public String deleteGroups(@RequestParam(value="groupIds",required=false) String groupIds) {        try {            return groupService.deleteGroups(groupIds);        } catch (Exception e) {            logger.error("删除异常----"+e.getMessage());            return "";        }    }    /*     * 查询该组下的用户数量     */    @GetMapping(value = "/countUserNum")    public int countUserNum (@RequestParam(value="groupId") Long groupId) {        int i  = groupService.countUserNum(groupId);        return i;    }        /**     * 根据Id查询用户组     * @param id     * @return     */    @GetMapping(value = "/selectById")    public UserGroup selectById (@RequestParam(value="id",required=false) Long id) {        UserGroup group = groupService.selectGroupById(id);        return group;    }        @GetMapping(value = "/selectAccountGroupByGroupId")    public List<AccountGroupVo> selectAccountGroupByGroupId(@RequestParam(value="groupId",required=false) Long groupId) {        try {           return accountGroupService.listAccountGroupByGroupId(groupId);        } catch (Exception e) {            logger.error("查询异常----"+e.getMessage());            return null;        }    }        @GetMapping(value = "/selectByAccountId")    UserGroup selectGroupByAccountId(@RequestParam(value="accountId",required=false) Long accountId) {        try {            return groupService.selectGroupByAccountId(accountId);        } catch (Exception e) {            logger.error("查询异常----"+e.getMessage());            return null;        }    }        @ApiOperation(value = "查询所有用户组", notes = "查询所有用户组", response = Response.class)    @RequestMapping(value = "/listAllGroups")    public List<UserGroup> listAllGroups() {        try {            List<UserGroup> groupList = groupService.selectList(null);            return groupList;        } catch (Exception e) {            logger.error("查询异常----"+e.getMessage());            return null;        }           }}