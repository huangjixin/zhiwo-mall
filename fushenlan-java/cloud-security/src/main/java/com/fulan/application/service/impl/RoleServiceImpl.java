package com.fulan.application.service.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.plugins.Page;import com.baomidou.mybatisplus.service.impl.ServiceImpl;import com.fulan.api.security.domain.Resource;import com.fulan.api.security.domain.Role;import com.fulan.api.security.domain.RoleResource;import com.fulan.api.security.vo.RoleAndResourceVo;import com.fulan.application.mapper.ResourceMapper;import com.fulan.application.mapper.RoleMapper;import com.fulan.application.mapper.RoleResourceMapper;import com.fulan.application.orm.id.IdGenerator;import com.fulan.application.service.RoleService;import com.fulan.application.util.domain.Response;@Servicepublic class RoleServiceImpl extends ServiceImpl<RoleMapper, Role> implements RoleService{	@Autowired    IdGenerator idGenerator;		@Autowired	RoleResourceMapper roleResourceMapper;		@Autowired	RoleMapper roleMapper;		@Autowired	ResourceMapper resourceMapper;	@Override	public Role findById(Long id) {		return this.selectById(id);	}	@Override	public Response<String> updateRole(Role role) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加角色成功");		//查看角色名称是否重复		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_name", role.getRoleName());		List<Role> roles=this.selectByMap(columnMap);		if(CollectionUtils.isNotEmpty(roles)){			resp.setCode(Response.ERROR);			resp.setMsg("角色已存在");			return resp;		}		this.updateById(role);		return resp;	}	@Override	public void deleteById(Long id) {		this.deleteById(id);	}	@Override	public Page<Role> list(Role role, Page<Role> page){		EntityWrapper<Role> wrapper=new EntityWrapper<>(role);		return this.selectPage(page, wrapper);	}	@Override	public Response<String> save(Role role) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加角色成功");		//查看角色名称是否重复		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_name", role.getRoleName());		List<Role> roles=this.selectByMap(columnMap);		if(CollectionUtils.isNotEmpty(roles)){			resp.setCode(Response.ERROR);			resp.setMsg("角色名称已存在");			return resp;		}		role.setId(idGenerator.generate());		this.insert(role);		return resp;	}	@Transactional(rollbackFor = Exception.class)	@Override	public Response<String> addResource(Long resourceId, Long roleId) {		//检查角色资源是否存在		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_id", roleId);		columnMap.put("resource_id", resourceId);		List<RoleResource> rrs=roleResourceMapper.selectByMap(columnMap);		Response<String> resp=new Response<String>(Response.SUCCESS, "添加角色资源成功");		if(CollectionUtils.isNotEmpty(rrs)){			resp.setCode(Response.ERROR);			resp.setMsg("角色资源已存在");			return resp;		}		RoleResource roleResource=new RoleResource();		roleResource.setId(idGenerator.generate());		roleResource.setResourceId(resourceId);		roleResource.setRoleId(roleId);		roleResourceMapper.insert(roleResource);		return resp;	}	@Transactional(rollbackFor = Exception.class)	@Override	public void deleteResource(Long resourceId, Long roleId) {		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_id", roleId);		columnMap.put("resource_id", resourceId);		roleResourceMapper.deleteByMap(columnMap);	}	@Override	public List<Resource> findResources(Long roleId,String resourceType) {		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_id", roleId);		List<RoleResource> roleResources=roleResourceMapper.selectByMap(columnMap);		List<Resource> resources=new ArrayList<>();		for(RoleResource roleResource:roleResources){			Resource resource=new Resource();			resource.setId(roleResource.getResourceId());			resource.setResourceType(resourceType);			resources.add(resourceMapper.selectOne(resource));		}		return resources;	}    	/**	 * 根据roleId 查询所有	 */	@Override	public List<RoleAndResourceVo> findRoleAndResource(String id) {		if(StringUtils.isNotEmpty(id)){			return roleMapper.listRARById(id);		}		return roleMapper.listRAR();	}	@Override	public List<Role> listForManage() {		return roleMapper.seleList();	}		@Override	public Response<String> saveForManage(Role role) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加角色成功");		//查看角色名称是否重复		Map<String,Object> columnMap=new HashMap<>();		columnMap.put("role_name", role.getRoleName());		columnMap.put("enabled", 1);		if(StringUtils.isNotEmpty(role.getParentId())){			columnMap.put("parent_id", role.getParentId());		}		List<Role> roles=this.selectByMap(columnMap);		if(CollectionUtils.isNotEmpty(roles)){			resp.setCode(Response.ERROR);			resp.setMsg("角色名称已存在");			return resp;		}		Long id = idGenerator.generate();		role.setId(id);		boolean bool = this.insert(role);		if(!bool){			resp.setCode(Response.ERROR);			resp.setMsg("新增角色失败");		}		resp.setData(String.valueOf(id));		return resp;	}	@Override	public Response<String> updateForManage(Role role,String type) {		Response<String> resp=new Response<String>(Response.SUCCESS, "添加角色成功");		//查看角色名称是否重复		if(null != role.getRoleName() && "0".equals(type)){			Map<String,Object> columnMap=new HashMap<>();			columnMap.put("role_name", role.getRoleName());			columnMap.put("enabled", 1);			if(StringUtils.isNotEmpty(role.getParentId())){				columnMap.put("parent_id", role.getParentId());			}			List<Role> roles=this.selectByMap(columnMap);			if(CollectionUtils.isNotEmpty(roles)){				resp.setCode(Response.ERROR);				resp.setMsg("角色已存在");				return resp;			}		}		this.updateById(role);		return resp;	}	@Override	public List<Resource> findResourceByRoleId(Long roleId) {		return resourceMapper.listResource(roleId);	}		@Override	public List<Role> seleList() {		return roleMapper.seleList();	}	}