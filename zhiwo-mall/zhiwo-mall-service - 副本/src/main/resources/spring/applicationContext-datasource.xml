<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-4.0.xsd
               http://www.springframework.org/schema/tx
               http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
               http://www.springframework.org/schema/websocket 
               http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd
               http://www.springframework.org/schema/cache   
        	   http://www.springframework.org/schema/cache/spring-cache.xsd
        	   http://www.springframework.org/schema/task 
        	   http://www.springframework.org/schema/task/spring-task-4.0.xsd">
	<!-- <bean id="dataSourceBase" class="com.alibaba.druid.pool.DruidDataSource" 
		init-method="init" destroy-method="close"> </bean> -->
	<bean class="com.zwotech.common.utils.SpringContextHolder"></bean>
	<context:property-placeholder location="classpath*:spring/*.properties" />
	
	<!-- 正式发布要替换成阿里巴巴的数据库连接org.springframework.jdbc.datasource.DriverManagerDataSource  -->
	<bean id="masterdataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- <property name="maxActive" value="30" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="50" /> -->

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<!-- <property name="filters" value="stat,wall,log4j" /> -->

		<!-- 如果配置了proxyFilters，此配置可以不配置 druid.stat.mergeSql=true 合并执行的相同sql，避免因为参数不同而统计多条sql语句 
			druid.stat.slowSqlMillis=10000 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢 <property 
			name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10000" 
			/> -->

		<!-- 监控统计拦截的filters -->
		<!-- 并在filters属性中配置了log4j -->
		<!-- <property name="proxyFilters"> <list> <ref bean="stat-filter" /> <ref 
			bean="log-filter" /> </list> </property> -->

	</bean>

	<bean id="slavedataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- <property name="filters" value="stat" /> -->

		<!-- <property name="maxActive" value="30" />
		<property name="initialSize" value="1" />
		<property name="maxWait" value="60000" />
		<property name="minIdle" value="1" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="50" /> -->

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<!-- <property name="filters" value="stat" /> -->

		<!-- 如果配置了proxyFilters，此配置可以不配置 druid.stat.mergeSql=true 合并执行的相同sql，避免因为参数不同而统计多条sql语句 
			druid.stat.slowSqlMillis=10000 用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢 <property 
			name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=10000" 
			/> ,wall,log4j -->

		<!-- 监控统计拦截的filters -->
		<!-- 并在filters属性中配置了log4j -->
		<!-- <property name="proxyFilters"> <list> <ref bean="stat-filter" /> <ref 
			bean="log-filter" /> </list> </property> -->
	</bean>

	<!-- 慢SQL记录 -->
	<!-- <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter"> 
		<property name="mergeSql" value="true" /> <property name="slowSqlMillis" 
		value="10000" /> <property name="logSlowSql" value="true" /> </bean> -->

	<!-- <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter"> 
		<property name="resultSetLogEnabled" value="false" /> <property name="statementExecutableSqlLogEnable" 
		value="true" /> </bean> -->

	<bean id="dataSource" class="com.zwotech.modules.common.dbconfig.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- write -->
				<entry key="master" value-ref="masterdataSource" />
				<!-- read -->
				<entry key="slave" value-ref="slavedataSource" />
			</map>

		</property>
		<property name="defaultTargetDataSource" ref="masterdataSource" />
	</bean>

	<!-- <bean id="dataSource" parent="dataSourceBase"> <property name="driverClassName" 
		value="${jdbc.driver}" /> <property name="url" value="${jdbc.url}" /> <property 
		name="username" value="${jdbc.username}" /> <property name="password" value="${jdbc.password}" 
		/> </bean> -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.zwotech.modules.**.dao" />
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<props>
							<prop key="dialect">mysql</prop>
							<prop key="offsetAsPageNum">true</prop>
							<prop key="rowBoundsWithCount">true</prop>
							<prop key="pageSizeZero">true</prop>
							<prop key="reasonable">false</prop>
							<prop key="supportMethodsArguments">false</prop>
							<prop key="returnPageInfo">none</prop>
						</props>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- scan formappers andlet them beautowired org.mybatis.spring.mapper.MapperScannerConfigurer-->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zwotech.modules.**.dao" />
		<property name="properties">
	        <value>
	            mappers=tk.mybatis.mapper.common.Mapper
	            IDENTITY=MYSQL
	        </value>
	    </property>
	</bean>

	<!-- 事务管理器配置：只支持单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 声明式事务配置，transaction-manager属性值默认为 transactionManager -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<task:annotation-driven />
	<!-- <cache:annotation-driven cache-manager="cacheManager"/>
	<bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
		<property name="cacheManagers">
			<list>
				<ref bean="ehCacheCacheManager" />
				<ref bean="redisCacheManager" />
			</list>
		</property>
		<property name="fallbackToNoOpCache" value="true" />
	</bean> -->
	<!-- <bean id="keyGenerator" class="org.springframework.cache.interceptor.SimpleKeyGenerator"></bean> -->

	<context:annotation-config />

	<aop:config></aop:config>

	<aop:aspectj-autoproxy />

	<context:component-scan base-package="com.zwotech.modules.**.service,com.zwotech.modules.syst.domain">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

</beans>